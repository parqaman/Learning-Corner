/* tslint:disable */
/* eslint-disable */
/**
 * fwe_backend
 * The API for the Learning Corner project
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: nils.heissner@stud.h-da.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * A Course
 * @export
 * @interface Course
 */
export interface Course {
    /**
     * 
     * @type {any}
     * @memberof Course
     */
    'id'?: any;
    /**
     * 
     * @type {any}
     * @memberof Course
     */
    'name': any;
    /**
     * 
     * @type {any}
     * @memberof Course
     */
    'description': any;
    /**
     * 
     * @type {User}
     * @memberof Course
     */
    'lecturer': User;
    /**
     * 
     * @type {any}
     * @memberof Course
     */
    'participants'?: any;
    /**
     * 
     * @type {any}
     * @memberof Course
     */
    'sections'?: any;
    /**
     * 
     * @type {any}
     * @memberof Course
     */
    'quizzes'?: any;
    /**
     * 
     * @type {any}
     * @memberof Course
     */
    'createdAt'?: any;
    /**
     * 
     * @type {any}
     * @memberof Course
     */
    'updatedAt'?: any;
}
/**
 * 
 * @export
 * @interface GetUsersId404Response
 */
export interface GetUsersId404Response {
    /**
     * 
     * @type {any}
     * @memberof GetUsersId404Response
     */
    'message'?: any;
}
/**
 * 
 * @export
 * @interface Group
 */
export interface Group {
    /**
     * 
     * @type {any}
     * @memberof Group
     */
    'id'?: any;
    /**
     * 
     * @type {any}
     * @memberof Group
     */
    'name'?: any;
    /**
     * 
     * @type {any}
     * @memberof Group
     */
    'description'?: any;
    /**
     * 
     * @type {User}
     * @memberof Group
     */
    'owner'?: User;
    /**
     * 
     * @type {any}
     * @memberof Group
     */
    'members'?: any;
    /**
     * 
     * @type {any}
     * @memberof Group
     */
    'sections'?: any;
}
/**
 * A File
 * @export
 * @interface ModelFile
 */
export interface ModelFile {
    /**
     * 
     * @type {any}
     * @memberof ModelFile
     */
    'id'?: any;
    /**
     * 
     * @type {any}
     * @memberof ModelFile
     */
    'name': any;
    /**
     * 
     * @type {any}
     * @memberof ModelFile
     */
    'owner'?: any;
    /**
     * 
     * @type {any}
     * @memberof ModelFile
     */
    'createdAt'?: any;
    /**
     * 
     * @type {any}
     * @memberof ModelFile
     */
    'updatedAt'?: any;
}
/**
 * 
 * @export
 * @interface PostAuthLogin200Response
 */
export interface PostAuthLogin200Response {
    /**
     * 
     * @type {any}
     * @memberof PostAuthLogin200Response
     */
    'accessToken': any;
}
/**
 * 
 * @export
 * @interface PostAuthLoginRequest
 */
export interface PostAuthLoginRequest {
    /**
     * 
     * @type {any}
     * @memberof PostAuthLoginRequest
     */
    'email'?: any;
    /**
     * 
     * @type {any}
     * @memberof PostAuthLoginRequest
     */
    'password'?: any;
}
/**
 * 
 * @export
 * @interface PostAuthRegisterRequest
 */
export interface PostAuthRegisterRequest {
    /**
     * 
     * @type {any}
     * @memberof PostAuthRegisterRequest
     */
    'email': any;
    /**
     * 
     * @type {any}
     * @memberof PostAuthRegisterRequest
     */
    'password': any;
    /**
     * 
     * @type {any}
     * @memberof PostAuthRegisterRequest
     */
    'firstName': any;
    /**
     * 
     * @type {any}
     * @memberof PostAuthRegisterRequest
     */
    'lastName': any;
}
/**
 * 
 * @export
 * @interface PutAuthResetpasswordRequest
 */
export interface PutAuthResetpasswordRequest {
    /**
     * 
     * @type {any}
     * @memberof PutAuthResetpasswordRequest
     */
    'id'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutAuthResetpasswordRequest
     */
    'currentPassword'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutAuthResetpasswordRequest
     */
    'newPassword'?: any;
}
/**
 * 
 * @export
 * @interface PutUsersId400Response
 */
export interface PutUsersId400Response {
    /**
     * 
     * @type {any}
     * @memberof PutUsersId400Response
     */
    'errors'?: any;
}
/**
 * A Quiz
 * @export
 * @interface Quiz
 */
export interface Quiz {
    /**
     * 
     * @type {any}
     * @memberof Quiz
     */
    'id'?: any;
    /**
     * 
     * @type {any}
     * @memberof Quiz
     */
    'name': any;
    /**
     * 
     * @type {any}
     * @memberof Quiz
     */
    'description': any;
    /**
     * 
     * @type {any}
     * @memberof Quiz
     */
    'questions': any;
    /**
     * 
     * @type {any}
     * @memberof Quiz
     */
    'createdAt'?: any;
    /**
     * 
     * @type {any}
     * @memberof Quiz
     */
    'updatedAt'?: any;
}
/**
 * A QuizQuestion
 * @export
 * @interface QuizQuestion
 */
export interface QuizQuestion {
    /**
     * 
     * @type {any}
     * @memberof QuizQuestion
     */
    'id'?: any;
    /**
     * 
     * @type {any}
     * @memberof QuizQuestion
     */
    'text': any;
    /**
     * 
     * @type {any}
     * @memberof QuizQuestion
     */
    'correctAnswer': any;
    /**
     * 
     * @type {any}
     * @memberof QuizQuestion
     */
    'answers': any;
    /**
     * 
     * @type {any}
     * @memberof QuizQuestion
     */
    'createdAt'?: any;
    /**
     * 
     * @type {any}
     * @memberof QuizQuestion
     */
    'updatedAt'?: any;
}
/**
 * A QuizQuestionAnswer
 * @export
 * @interface QuizQuestionAnswer
 */
export interface QuizQuestionAnswer {
    /**
     * 
     * @type {any}
     * @memberof QuizQuestionAnswer
     */
    'id'?: any;
    /**
     * 
     * @type {any}
     * @memberof QuizQuestionAnswer
     */
    'text': any;
    /**
     * 
     * @type {any}
     * @memberof QuizQuestionAnswer
     */
    'createdAt'?: any;
    /**
     * 
     * @type {any}
     * @memberof QuizQuestionAnswer
     */
    'updatedAt'?: any;
}
/**
 * A content section in a course/group
 * @export
 * @interface Section
 */
export interface Section {
    /**
     * 
     * @type {any}
     * @memberof Section
     */
    'id'?: any;
    /**
     * 
     * @type {any}
     * @memberof Section
     */
    'heading'?: any;
    /**
     * 
     * @type {any}
     * @memberof Section
     */
    'content'?: any;
    /**
     * 
     * @type {any}
     * @memberof Section
     */
    'files'?: any;
}
/**
 * The User Objet
 * @export
 * @interface User
 */
export interface User {
    /**
     * Unique identifier for the given user.
     * @type {any}
     * @memberof User
     */
    'id': any;
    /**
     * 
     * @type {any}
     * @memberof User
     */
    'firstName': any;
    /**
     * 
     * @type {any}
     * @memberof User
     */
    'lastName': any;
    /**
     * 
     * @type {any}
     * @memberof User
     */
    'email': any;
    /**
     * 
     * @type {any}
     * @memberof User
     */
    'photo': any;
    /**
     * 
     * @type {any}
     * @memberof User
     */
    'createdAt'?: any;
    /**
     * 
     * @type {any}
     * @memberof User
     */
    'updatedAt'?: any;
    /**
     * 
     * @type {any}
     * @memberof User
     */
    'courses'?: any;
    /**
     * 
     * @type {any}
     * @memberof User
     */
    'groups'?: any;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary delete a course by only course creator
         * @param {any} courseID 
         * @param {any} userID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCoursesCourseIDUsersUserID: async (courseID: any, userID: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseID' is not null or undefined
            assertParamExists('deleteCoursesCourseIDUsersUserID', 'courseID', courseID)
            // verify required parameter 'userID' is not null or undefined
            assertParamExists('deleteCoursesCourseIDUsersUserID', 'userID', userID)
            const localVarPath = `/courses/{courseID}/user/{userID}`
                .replace(`{${"courseID"}}`, encodeURIComponent(String(courseID)))
                .replace(`{${"userID"}}`, encodeURIComponent(String(userID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete User
         * @param {any} id The id of the user to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersId: async (id: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUsersId', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {any} userID 
         * @param {any} courseID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersUserIDCourseCourseID: async (userID: any, courseID: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userID' is not null or undefined
            assertParamExists('deleteUsersUserIDCourseCourseID', 'userID', userID)
            // verify required parameter 'courseID' is not null or undefined
            assertParamExists('deleteUsersUserIDCourseCourseID', 'courseID', courseID)
            const localVarPath = `/users/{userID}/course/{courseID}`
                .replace(`{${"userID"}}`, encodeURIComponent(String(userID)))
                .replace(`{${"courseID"}}`, encodeURIComponent(String(courseID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get courses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourses: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/courses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an Course by Id
         * @param {any} id The id of the course to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoursesId: async (id: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCoursesId', 'id', id)
            const localVarPath = `/courses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Users
         * @param {any} [name] The name to filter users by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (name?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a User by Id
         * @param {any} id The id of the user to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersId: async (id: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUsersId', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Perform login and return accesstoken
         * @param {PostAuthLoginRequest} [postAuthLoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuthLogin: async (postAuthLoginRequest?: PostAuthLoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postAuthLoginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Perform registration
         * @param {PostAuthRegisterRequest} [postAuthRegisterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuthRegister: async (postAuthRegisterRequest?: PostAuthRegisterRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postAuthRegisterRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Post course
         * @param {Course} course The Course Object to create and the newly added Files
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCourses: async (course: Course, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'course' is not null or undefined
            assertParamExists('postCourses', 'course', course)
            const localVarPath = `/courses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(course, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update password
         * @param {PutAuthResetpasswordRequest} [putAuthResetpasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAuthResetpassword: async (putAuthResetpasswordRequest?: PutAuthResetpasswordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/resetpassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putAuthResetpasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update a course by only course creator
         * @param {any} courseID 
         * @param {any} userID 
         * @param {Course} [course] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCourse: async (courseID: any, userID: any, course?: Course, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseID' is not null or undefined
            assertParamExists('putCourse', 'courseID', courseID)
            // verify required parameter 'userID' is not null or undefined
            assertParamExists('putCourse', 'userID', userID)
            const localVarPath = `/courses/{courseID}/user/{userID}`
                .replace(`{${"courseID"}}`, encodeURIComponent(String(courseID)))
                .replace(`{${"userID"}}`, encodeURIComponent(String(userID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(course, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Put User
         * @param {any} id The id of the user to work with
         * @param {User} user The User Object to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUsersId: async (id: any, user: User, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putUsersId', 'id', id)
            // verify required parameter 'user' is not null or undefined
            assertParamExists('putUsersId', 'user', user)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {any} userID 
         * @param {any} courseID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUsersUserIDCourseCourseID: async (userID: any, courseID: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userID' is not null or undefined
            assertParamExists('putUsersUserIDCourseCourseID', 'userID', userID)
            // verify required parameter 'courseID' is not null or undefined
            assertParamExists('putUsersUserIDCourseCourseID', 'courseID', courseID)
            const localVarPath = `/users/{userID}/course/{courseID}`
                .replace(`{${"userID"}}`, encodeURIComponent(String(userID)))
                .replace(`{${"courseID"}}`, encodeURIComponent(String(courseID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary delete a course by only course creator
         * @param {any} courseID 
         * @param {any} userID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCoursesCourseIDUsersUserID(courseID: any, userID: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCoursesCourseIDUsersUserID(courseID, userID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete User
         * @param {any} id The id of the user to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsersId(id: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUsersId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {any} userID 
         * @param {any} courseID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsersUserIDCourseCourseID(userID: any, courseID: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUsersUserIDCourseCourseID(userID, courseID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get courses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourses(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCourses(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an Course by Id
         * @param {any} id The id of the course to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCoursesId(id: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Course>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCoursesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Users
         * @param {any} [name] The name to filter users by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(name?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a User by Id
         * @param {any} id The id of the user to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersId(id: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Perform login and return accesstoken
         * @param {PostAuthLoginRequest} [postAuthLoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAuthLogin(postAuthLoginRequest?: PostAuthLoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostAuthLogin200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAuthLogin(postAuthLoginRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Perform registration
         * @param {PostAuthRegisterRequest} [postAuthRegisterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAuthRegister(postAuthRegisterRequest?: PostAuthRegisterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAuthRegister(postAuthRegisterRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Post course
         * @param {Course} course The Course Object to create and the newly added Files
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCourses(course: Course, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Course>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCourses(course, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update password
         * @param {PutAuthResetpasswordRequest} [putAuthResetpasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putAuthResetpassword(putAuthResetpasswordRequest?: PutAuthResetpasswordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putAuthResetpassword(putAuthResetpasswordRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update a course by only course creator
         * @param {any} courseID 
         * @param {any} userID 
         * @param {Course} [course] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCourse(courseID: any, userID: any, course?: Course, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putCourse(courseID, userID, course, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Put User
         * @param {any} id The id of the user to work with
         * @param {User} user The User Object to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUsersId(id: any, user: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putUsersId(id, user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {any} userID 
         * @param {any} courseID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUsersUserIDCourseCourseID(userID: any, courseID: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putUsersUserIDCourseCourseID(userID, courseID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary delete a course by only course creator
         * @param {any} courseID 
         * @param {any} userID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCoursesCourseIDUsersUserID(courseID: any, userID: any, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCoursesCourseIDUsersUserID(courseID, userID, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete User
         * @param {any} id The id of the user to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersId(id: any, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUsersId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {any} userID 
         * @param {any} courseID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersUserIDCourseCourseID(userID: any, courseID: any, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUsersUserIDCourseCourseID(userID, courseID, options).then((request) => request(axios, basePath));
        },
        /**
         * Get courses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourses(options?: any): AxiosPromise<any> {
            return localVarFp.getCourses(options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Course by Id
         * @param {any} id The id of the course to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoursesId(id: any, options?: any): AxiosPromise<Course> {
            return localVarFp.getCoursesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Users
         * @param {any} [name] The name to filter users by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(name?: any, options?: any): AxiosPromise<any> {
            return localVarFp.getUsers(name, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a User by Id
         * @param {any} id The id of the user to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersId(id: any, options?: any): AxiosPromise<User> {
            return localVarFp.getUsersId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Perform login and return accesstoken
         * @param {PostAuthLoginRequest} [postAuthLoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuthLogin(postAuthLoginRequest?: PostAuthLoginRequest, options?: any): AxiosPromise<PostAuthLogin200Response> {
            return localVarFp.postAuthLogin(postAuthLoginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Perform registration
         * @param {PostAuthRegisterRequest} [postAuthRegisterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuthRegister(postAuthRegisterRequest?: PostAuthRegisterRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postAuthRegister(postAuthRegisterRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Post course
         * @param {Course} course The Course Object to create and the newly added Files
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCourses(course: Course, options?: any): AxiosPromise<Course> {
            return localVarFp.postCourses(course, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update password
         * @param {PutAuthResetpasswordRequest} [putAuthResetpasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAuthResetpassword(putAuthResetpasswordRequest?: PutAuthResetpasswordRequest, options?: any): AxiosPromise<void> {
            return localVarFp.putAuthResetpassword(putAuthResetpasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update a course by only course creator
         * @param {any} courseID 
         * @param {any} userID 
         * @param {Course} [course] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCourse(courseID: any, userID: any, course?: Course, options?: any): AxiosPromise<void> {
            return localVarFp.putCourse(courseID, userID, course, options).then((request) => request(axios, basePath));
        },
        /**
         * Put User
         * @param {any} id The id of the user to work with
         * @param {User} user The User Object to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUsersId(id: any, user: User, options?: any): AxiosPromise<User> {
            return localVarFp.putUsersId(id, user, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {any} userID 
         * @param {any} courseID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUsersUserIDCourseCourseID(userID: any, courseID: any, options?: any): AxiosPromise<void> {
            return localVarFp.putUsersUserIDCourseCourseID(userID, courseID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary delete a course by only course creator
     * @param {any} courseID 
     * @param {any} userID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteCoursesCourseIDUsersUserID(courseID: any, userID: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteCoursesCourseIDUsersUserID(courseID, userID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete User
     * @param {any} id The id of the user to work with
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteUsersId(id: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteUsersId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {any} userID 
     * @param {any} courseID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteUsersUserIDCourseCourseID(userID: any, courseID: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteUsersUserIDCourseCourseID(userID, courseID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get courses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCourses(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCourses(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an Course by Id
     * @param {any} id The id of the course to work with
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCoursesId(id: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCoursesId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Users
     * @param {any} [name] The name to filter users by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUsers(name?: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUsers(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a User by Id
     * @param {any} id The id of the user to work with
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUsersId(id: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUsersId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Perform login and return accesstoken
     * @param {PostAuthLoginRequest} [postAuthLoginRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postAuthLogin(postAuthLoginRequest?: PostAuthLoginRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postAuthLogin(postAuthLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Perform registration
     * @param {PostAuthRegisterRequest} [postAuthRegisterRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postAuthRegister(postAuthRegisterRequest?: PostAuthRegisterRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postAuthRegister(postAuthRegisterRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Post course
     * @param {Course} course The Course Object to create and the newly added Files
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postCourses(course: Course, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postCourses(course, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update password
     * @param {PutAuthResetpasswordRequest} [putAuthResetpasswordRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putAuthResetpassword(putAuthResetpasswordRequest?: PutAuthResetpasswordRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putAuthResetpassword(putAuthResetpasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update a course by only course creator
     * @param {any} courseID 
     * @param {any} userID 
     * @param {Course} [course] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putCourse(courseID: any, userID: any, course?: Course, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putCourse(courseID, userID, course, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Put User
     * @param {any} id The id of the user to work with
     * @param {User} user The User Object to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putUsersId(id: any, user: User, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putUsersId(id, user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {any} userID 
     * @param {any} courseID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putUsersUserIDCourseCourseID(userID: any, courseID: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putUsersUserIDCourseCourseID(userID, courseID, options).then((request) => request(this.axios, this.basePath));
    }
}


