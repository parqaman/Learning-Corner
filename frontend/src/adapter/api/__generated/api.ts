/* tslint:disable */
/* eslint-disable */
/**
 * fwe_backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * A Course
 * @export
 * @interface Course
 */
export interface Course {
    /**
     * 
     * @type {any}
     * @memberof Course
     */
    'id'?: any;
    /**
     * 
     * @type {any}
     * @memberof Course
     */
    'name': any;
    /**
     * 
     * @type {any}
     * @memberof Course
     */
    'description': any;
    /**
     * 
     * @type {any}
     * @memberof Course
     */
    'owner': any;
    /**
     * 
     * @type {any}
     * @memberof Course
     */
    'participants'?: any;
    /**
     * 
     * @type {any}
     * @memberof Course
     */
    'files'?: any;
    /**
     * 
     * @type {any}
     * @memberof Course
     */
    'quizzes'?: any;
    /**
     * 
     * @type {any}
     * @memberof Course
     */
    'createdAt'?: any;
    /**
     * 
     * @type {any}
     * @memberof Course
     */
    'updatedAt'?: any;
}
/**
 * A File
 * @export
 * @interface CourseFile
 */
export interface CourseFile {
    /**
     * 
     * @type {any}
     * @memberof CourseFile
     */
    'id'?: any;
    /**
     * 
     * @type {any}
     * @memberof CourseFile
     */
    'name': any;
    /**
     * 
     * @type {any}
     * @memberof CourseFile
     */
    'course': any;
    /**
     * 
     * @type {any}
     * @memberof CourseFile
     */
    'createdAt'?: any;
    /**
     * 
     * @type {any}
     * @memberof CourseFile
     */
    'updatedAt'?: any;
}
/**
 * 
 * @export
 * @interface GetUsersId404Response
 */
export interface GetUsersId404Response {
    /**
     * 
     * @type {any}
     * @memberof GetUsersId404Response
     */
    'message'?: any;
}
/**
 * 
 * @export
 * @interface PostUsers400Response
 */
export interface PostUsers400Response {
    /**
     * 
     * @type {any}
     * @memberof PostUsers400Response
     */
    'errors'?: any;
}
/**
 * A Quiz
 * @export
 * @interface Quiz
 */
export interface Quiz {
    /**
     * 
     * @type {any}
     * @memberof Quiz
     */
    'id'?: any;
    /**
     * 
     * @type {any}
     * @memberof Quiz
     */
    'name': any;
    /**
     * 
     * @type {any}
     * @memberof Quiz
     */
    'description': any;
    /**
     * 
     * @type {any}
     * @memberof Quiz
     */
    'questions': any;
    /**
     * 
     * @type {any}
     * @memberof Quiz
     */
    'createdAt'?: any;
    /**
     * 
     * @type {any}
     * @memberof Quiz
     */
    'updatedAt'?: any;
}
/**
 * A QuizQuestion
 * @export
 * @interface QuizQuestion
 */
export interface QuizQuestion {
    /**
     * 
     * @type {any}
     * @memberof QuizQuestion
     */
    'id'?: any;
    /**
     * 
     * @type {any}
     * @memberof QuizQuestion
     */
    'text': any;
    /**
     * 
     * @type {any}
     * @memberof QuizQuestion
     */
    'correctAnswer': any;
    /**
     * 
     * @type {any}
     * @memberof QuizQuestion
     */
    'answers': any;
    /**
     * 
     * @type {any}
     * @memberof QuizQuestion
     */
    'createdAt'?: any;
    /**
     * 
     * @type {any}
     * @memberof QuizQuestion
     */
    'updatedAt'?: any;
}
/**
 * A QuizQuestionAnswer
 * @export
 * @interface QuizQuestionAnswer
 */
export interface QuizQuestionAnswer {
    /**
     * 
     * @type {any}
     * @memberof QuizQuestionAnswer
     */
    'id'?: any;
    /**
     * 
     * @type {any}
     * @memberof QuizQuestionAnswer
     */
    'text': any;
    /**
     * 
     * @type {any}
     * @memberof QuizQuestionAnswer
     */
    'createdAt'?: any;
    /**
     * 
     * @type {any}
     * @memberof QuizQuestionAnswer
     */
    'updatedAt'?: any;
}
/**
 * The User Objet
 * @export
 * @interface User
 */
export interface User {
    /**
     * Unique identifier for the given recipe.
     * @type {any}
     * @memberof User
     */
    'id'?: any;
    /**
     * 
     * @type {any}
     * @memberof User
     */
    'username': any;
    /**
     * 
     * @type {any}
     * @memberof User
     */
    'email': any;
    /**
     * 
     * @type {any}
     * @memberof User
     */
    'password': any;
    /**
     * 
     * @type {any}
     * @memberof User
     */
    'createdAt'?: any;
    /**
     * 
     * @type {any}
     * @memberof User
     */
    'updatedAt'?: any;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete course
         * @param {any} id The id of the course to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCoursesId: async (id: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCoursesId', 'id', id)
            const localVarPath = `/courses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete User
         * @param {any} id The id of the user to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersId: async (id: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUsersId', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get courses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourses: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/courses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an Course by Id
         * @param {any} id The id of the course to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoursesId: async (id: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCoursesId', 'id', id)
            const localVarPath = `/courses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Users
         * @param {any} [name] The name to filter users by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (name?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a User by Id
         * @param {any} id The id of the user to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersId: async (id: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUsersId', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Post course
         * @param {any} [course] 
         * @param {any} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCourses: async (course?: any, files?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/courses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (course !== undefined) { 
                localVarFormParams.append('course', new Blob([JSON.stringify(course)], { type: "application/json", }));
            }
    
            if (files !== undefined) { 
                localVarFormParams.append('files', new Blob([JSON.stringify(files)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Post User
         * @param {User} user The User Object to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsers: async (user: User, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'user' is not null or undefined
            assertParamExists('postUsers', 'user', user)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Put course
         * @param {any} id The id of the course to work with
         * @param {any} [course] 
         * @param {any} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCoursesId: async (id: any, course?: any, files?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putCoursesId', 'id', id)
            const localVarPath = `/courses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (course !== undefined) { 
                localVarFormParams.append('course', new Blob([JSON.stringify(course)], { type: "application/json", }));
            }
    
            if (files !== undefined) { 
                localVarFormParams.append('files', new Blob([JSON.stringify(files)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Put User
         * @param {any} id The id of the user to work with
         * @param {User} user The User Object to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUsersId: async (id: any, user: User, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putUsersId', 'id', id)
            // verify required parameter 'user' is not null or undefined
            assertParamExists('putUsersId', 'user', user)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete course
         * @param {any} id The id of the course to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCoursesId(id: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCoursesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete User
         * @param {any} id The id of the user to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsersId(id: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUsersId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get courses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourses(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCourses(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get an Course by Id
         * @param {any} id The id of the course to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCoursesId(id: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Course>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCoursesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Users
         * @param {any} [name] The name to filter users by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(name?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a User by Id
         * @param {any} id The id of the user to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersId(id: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Post course
         * @param {any} [course] 
         * @param {any} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCourses(course?: any, files?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Course>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCourses(course, files, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Post User
         * @param {User} user The User Object to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUsers(user: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUsers(user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Put course
         * @param {any} id The id of the course to work with
         * @param {any} [course] 
         * @param {any} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCoursesId(id: any, course?: any, files?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Course>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putCoursesId(id, course, files, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Put User
         * @param {any} id The id of the user to work with
         * @param {User} user The User Object to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUsersId(id: any, user: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putUsersId(id, user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete course
         * @param {any} id The id of the course to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCoursesId(id: any, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCoursesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete User
         * @param {any} id The id of the user to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersId(id: any, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUsersId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get courses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourses(options?: any): AxiosPromise<any> {
            return localVarFp.getCourses(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an Course by Id
         * @param {any} id The id of the course to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoursesId(id: any, options?: any): AxiosPromise<Course> {
            return localVarFp.getCoursesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Users
         * @param {any} [name] The name to filter users by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(name?: any, options?: any): AxiosPromise<any> {
            return localVarFp.getUsers(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a User by Id
         * @param {any} id The id of the user to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersId(id: any, options?: any): AxiosPromise<User> {
            return localVarFp.getUsersId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Post course
         * @param {any} [course] 
         * @param {any} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCourses(course?: any, files?: any, options?: any): AxiosPromise<Course> {
            return localVarFp.postCourses(course, files, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Post User
         * @param {User} user The User Object to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsers(user: User, options?: any): AxiosPromise<User> {
            return localVarFp.postUsers(user, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Put course
         * @param {any} id The id of the course to work with
         * @param {any} [course] 
         * @param {any} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCoursesId(id: any, course?: any, files?: any, options?: any): AxiosPromise<Course> {
            return localVarFp.putCoursesId(id, course, files, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Put User
         * @param {any} id The id of the user to work with
         * @param {User} user The User Object to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUsersId(id: any, user: User, options?: any): AxiosPromise<User> {
            return localVarFp.putUsersId(id, user, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Delete course
     * @param {any} id The id of the course to work with
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteCoursesId(id: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteCoursesId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete User
     * @param {any} id The id of the user to work with
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteUsersId(id: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteUsersId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get courses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCourses(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCourses(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an Course by Id
     * @param {any} id The id of the course to work with
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCoursesId(id: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCoursesId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Users
     * @param {any} [name] The name to filter users by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUsers(name?: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUsers(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a User by Id
     * @param {any} id The id of the user to work with
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUsersId(id: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUsersId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Post course
     * @param {any} [course] 
     * @param {any} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postCourses(course?: any, files?: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postCourses(course, files, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Post User
     * @param {User} user The User Object to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postUsers(user: User, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postUsers(user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Put course
     * @param {any} id The id of the course to work with
     * @param {any} [course] 
     * @param {any} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putCoursesId(id: any, course?: any, files?: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putCoursesId(id, course, files, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Put User
     * @param {any} id The id of the user to work with
     * @param {User} user The User Object to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putUsersId(id: any, user: User, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putUsersId(id, user, options).then((request) => request(this.axios, this.basePath));
    }
}


