/* tslint:disable */
/* eslint-disable */
/**
 * fwe_backend
 * The API for the Learning Corner project
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: nils.heissner@stud.h-da.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * A Course
 * @export
 * @interface Course
 */
export interface Course {
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'description': string;
    /**
     * 
     * @type {User}
     * @memberof Course
     */
    'lecturer': User;
    /**
     * 
     * @type {Array<User>}
     * @memberof Course
     */
    'participants'?: Array<User>;
    /**
     * 
     * @type {Array<Group>}
     * @memberof Course
     */
    'groups'?: Array<Group>;
    /**
     * 
     * @type {Array<Section>}
     * @memberof Course
     */
    'sections'?: Array<Section>;
    /**
     * 
     * @type {Array<Quiz>}
     * @memberof Course
     */
    'quizzes'?: Array<Quiz>;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface GetUsersId404Response
 */
export interface GetUsersId404Response {
    /**
     * 
     * @type {string}
     * @memberof GetUsersId404Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface Group
 */
export interface Group {
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'description'?: string;
    /**
     * 
     * @type {Course}
     * @memberof Group
     */
    'course'?: Course;
    /**
     * 
     * @type {Array<User>}
     * @memberof Group
     */
    'members'?: Array<User>;
    /**
     * 
     * @type {Array<Section>}
     * @memberof Group
     */
    'sections'?: Array<Section>;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface LearnerInCourse
 */
export interface LearnerInCourse {
    /**
     * 
     * @type {string}
     * @memberof LearnerInCourse
     */
    'id'?: string;
    /**
     * 
     * @type {User}
     * @memberof LearnerInCourse
     */
    'learner'?: User;
    /**
     * 
     * @type {Course}
     * @memberof LearnerInCourse
     */
    'course'?: Course;
    /**
     * 
     * @type {Array<Group>}
     * @memberof LearnerInCourse
     */
    'groups'?: Array<Group>;
    /**
     * 
     * @type {boolean}
     * @memberof LearnerInCourse
     */
    'favoriteCourse'?: boolean;
}
/**
 * 
 * @export
 * @interface LearnerInGroup
 */
export interface LearnerInGroup {
    /**
     * 
     * @type {LearnerInCourse}
     * @memberof LearnerInGroup
     */
    'member'?: LearnerInCourse;
    /**
     * 
     * @type {Group}
     * @memberof LearnerInGroup
     */
    'group'?: Group;
}
/**
 * A File
 * @export
 * @interface ModelFile
 */
export interface ModelFile {
    /**
     * 
     * @type {string}
     * @memberof ModelFile
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelFile
     */
    'name': string;
    /**
     * 
     * @type {any}
     * @memberof ModelFile
     */
    'section'?: any;
    /**
     * 
     * @type {string}
     * @memberof ModelFile
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelFile
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface PostAuthLogin200Response
 */
export interface PostAuthLogin200Response {
    /**
     * 
     * @type {string}
     * @memberof PostAuthLogin200Response
     */
    'accessToken': string;
}
/**
 * 
 * @export
 * @interface PostAuthLoginRequest
 */
export interface PostAuthLoginRequest {
    /**
     * 
     * @type {string}
     * @memberof PostAuthLoginRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostAuthLoginRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface PostAuthRegisterRequest
 */
export interface PostAuthRegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof PostAuthRegisterRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof PostAuthRegisterRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof PostAuthRegisterRequest
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof PostAuthRegisterRequest
     */
    'lastName': string;
}
/**
 * 
 * @export
 * @interface PostCourses409Response
 */
export interface PostCourses409Response {
    /**
     * 
     * @type {string}
     * @memberof PostCourses409Response
     */
    'errors'?: string;
}
/**
 * 
 * @export
 * @interface PutAuthResetpasswordRequest
 */
export interface PutAuthResetpasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof PutAuthResetpasswordRequest
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PutAuthResetpasswordRequest
     */
    'currentPassword'?: string;
    /**
     * 
     * @type {string}
     * @memberof PutAuthResetpasswordRequest
     */
    'newPassword'?: string;
}
/**
 * 
 * @export
 * @interface PutUsersId400Response
 */
export interface PutUsersId400Response {
    /**
     * 
     * @type {Array<string>}
     * @memberof PutUsersId400Response
     */
    'errors'?: Array<string>;
}
/**
 * A Quiz
 * @export
 * @interface Quiz
 */
export interface Quiz {
    /**
     * 
     * @type {string}
     * @memberof Quiz
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Quiz
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Quiz
     */
    'description': string;
    /**
     * 
     * @type {Array<QuizQuestion>}
     * @memberof Quiz
     */
    'questions': Array<QuizQuestion>;
    /**
     * 
     * @type {string}
     * @memberof Quiz
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Quiz
     */
    'updatedAt'?: string;
}
/**
 * A QuizQuestion
 * @export
 * @interface QuizQuestion
 */
export interface QuizQuestion {
    /**
     * 
     * @type {string}
     * @memberof QuizQuestion
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuizQuestion
     */
    'text': string;
    /**
     * 
     * @type {number}
     * @memberof QuizQuestion
     */
    'correctAnswer': number;
    /**
     * 
     * @type {Array<QuizQuestionAnswer>}
     * @memberof QuizQuestion
     */
    'answers': Array<QuizQuestionAnswer>;
    /**
     * 
     * @type {string}
     * @memberof QuizQuestion
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuizQuestion
     */
    'updatedAt'?: string;
}
/**
 * A QuizQuestionAnswer
 * @export
 * @interface QuizQuestionAnswer
 */
export interface QuizQuestionAnswer {
    /**
     * 
     * @type {string}
     * @memberof QuizQuestionAnswer
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuizQuestionAnswer
     */
    'text': string;
    /**
     * 
     * @type {string}
     * @memberof QuizQuestionAnswer
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuizQuestionAnswer
     */
    'updatedAt'?: string;
}
/**
 * A content section in a course/group
 * @export
 * @interface Section
 */
export interface Section {
    /**
     * 
     * @type {string}
     * @memberof Section
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Section
     */
    'heading': string;
    /**
     * 
     * @type {string}
     * @memberof Section
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Section
     */
    'text': string;
    /**
     * 
     * @type {Course}
     * @memberof Section
     */
    'course'?: Course;
    /**
     * 
     * @type {Group}
     * @memberof Section
     */
    'group'?: Group;
    /**
     * 
     * @type {Array<any>}
     * @memberof Section
     */
    'files'?: Array<any>;
    /**
     * 
     * @type {string}
     * @memberof Section
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Section
     */
    'updatedAt'?: string;
}
/**
 * The User Objet
 * @export
 * @interface User
 */
export interface User {
    /**
     * Unique identifier for the given user.
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'photo': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {Array<Course>}
     * @memberof User
     */
    'courses'?: Array<Course>;
    /**
     * 
     * @type {Array<Group>}
     * @memberof User
     */
    'groups'?: Array<Group>;
    /**
     * 
     * @type {Array<Course>}
     * @memberof User
     */
    'joinedCourses'?: Array<Course>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary delete a course by only course creator
         * @param {string} id The id of the course to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCoursesCourseIDUsersUserID: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCoursesCourseIDUsersUserID', 'id', id)
            const localVarPath = `/courses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete a group
         * @param {string} id The id of the group to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteGroup', 'id', id)
            const localVarPath = `/groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete section in a course
         * @param {string} courseId The id of the course
         * @param {string} sectionId The id of the section
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSectionCourse: async (courseId: string, sectionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseId' is not null or undefined
            assertParamExists('deleteSectionCourse', 'courseId', courseId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('deleteSectionCourse', 'sectionId', sectionId)
            const localVarPath = `/courses/{courseId}/section/{sectionId}`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)))
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete section in a group
         * @param {string} groupId The id of the group
         * @param {string} sectionId The id of the section
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSectionGroup: async (groupId: string, sectionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('deleteSectionGroup', 'groupId', groupId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('deleteSectionGroup', 'sectionId', sectionId)
            const localVarPath = `/groups/{groupId}/section/{sectionId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete User
         * @param {string} id The id of the user to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUsersId', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} userID 
         * @param {string} courseID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersUserIDCourseCourseID: async (userID: string, courseID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userID' is not null or undefined
            assertParamExists('deleteUsersUserIDCourseCourseID', 'userID', userID)
            // verify required parameter 'courseID' is not null or undefined
            assertParamExists('deleteUsersUserIDCourseCourseID', 'courseID', courseID)
            const localVarPath = `/users/{userID}/course/{courseID}`
                .replace(`{${"userID"}}`, encodeURIComponent(String(userID)))
                .replace(`{${"courseID"}}`, encodeURIComponent(String(courseID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} userid 
         * @param {string} courseid 
         * @param {string} groupid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersUseridCourseCourseidGroupGroupid: async (userid: string, courseid: string, groupid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userid' is not null or undefined
            assertParamExists('deleteUsersUseridCourseCourseidGroupGroupid', 'userid', userid)
            // verify required parameter 'courseid' is not null or undefined
            assertParamExists('deleteUsersUseridCourseCourseidGroupGroupid', 'courseid', courseid)
            // verify required parameter 'groupid' is not null or undefined
            assertParamExists('deleteUsersUseridCourseCourseidGroupGroupid', 'groupid', groupid)
            const localVarPath = `/users/{userid}/course/{courseid}/group/{groupid}`
                .replace(`{${"userid"}}`, encodeURIComponent(String(userid)))
                .replace(`{${"courseid"}}`, encodeURIComponent(String(courseid)))
                .replace(`{${"groupid"}}`, encodeURIComponent(String(groupid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get courses
         * @param {string} [name] The name to filter courses by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourses: async (name?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/courses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an Course by Id
         * @param {string} id The id of the course to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoursesId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCoursesId', 'id', id)
            const localVarPath = `/courses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a Group by Id
         * @param {string} id The id of the group to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getGroupId', 'id', id)
            const localVarPath = `/groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get user favorite course list
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserFavoriteCourses: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserFavoriteCourses', 'userId', userId)
            const localVarPath = `/users/{userId}/favorite`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Users
         * @param {string} [name] The name to filter users by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (name?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a User by Id
         * @param {string} id The id of the user to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUsersId', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {string} userid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersUseridGroups: async (userid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userid' is not null or undefined
            assertParamExists('getUsersUseridGroups', 'userid', userid)
            const localVarPath = `/users/{userid}/groups`
                .replace(`{${"userid"}}`, encodeURIComponent(String(userid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Perform login and return accesstoken
         * @param {PostAuthLoginRequest} [postAuthLoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuthLogin: async (postAuthLoginRequest?: PostAuthLoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postAuthLoginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Perform registration
         * @param {PostAuthRegisterRequest} [postAuthRegisterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuthRegister: async (postAuthRegisterRequest?: PostAuthRegisterRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postAuthRegisterRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Post course
         * @param {Course} course The Course Object to create and the newly added Files
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCourses: async (course: Course, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'course' is not null or undefined
            assertParamExists('postCourses', 'course', course)
            const localVarPath = `/courses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(course, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Post group
         * @param {Group} group 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGroups: async (group: Group, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            assertParamExists('postGroups', 'group', group)
            const localVarPath = `/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(group, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create section in course
         * @param {string} id The id of the course
         * @param {Section} section The Section Object to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSectionCourse: async (id: string, section: Section, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postSectionCourse', 'id', id)
            // verify required parameter 'section' is not null or undefined
            assertParamExists('postSectionCourse', 'section', section)
            const localVarPath = `/courses/{id}/section`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(section, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add file to section
         * @param {string} sectionId The id of the section
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSectionFile: async (sectionId: string, file?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('postSectionFile', 'sectionId', sectionId)
            const localVarPath = `/sections/{sectionId}/file`
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create section in group
         * @param {string} id The id of the group
         * @param {Section} section The Section Object to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSectionGroup: async (id: string, section: Section, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postSectionGroup', 'id', id)
            // verify required parameter 'section' is not null or undefined
            assertParamExists('postSectionGroup', 'section', section)
            const localVarPath = `/groups/{id}/section`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(section, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update password
         * @param {PutAuthResetpasswordRequest} [putAuthResetpasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAuthResetpassword: async (putAuthResetpasswordRequest?: PutAuthResetpasswordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/resetpassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putAuthResetpasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update a course by only course creator
         * @param {string} id The id of the course to work with
         * @param {Course} [course] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCourse: async (id: string, course?: Course, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putCourse', 'id', id)
            const localVarPath = `/courses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(course, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update a group
         * @param {string} id The id of the group to work with
         * @param {Group} [group] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putGroup: async (id: string, group?: Group, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putGroup', 'id', id)
            const localVarPath = `/groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(group, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update section in a course
         * @param {string} courseId The id of the course
         * @param {string} sectionId The id of the section
         * @param {Section} [section] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSectionCourse: async (courseId: string, sectionId: string, section?: Section, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseId' is not null or undefined
            assertParamExists('putSectionCourse', 'courseId', courseId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('putSectionCourse', 'sectionId', sectionId)
            const localVarPath = `/courses/{courseId}/section/{sectionId}`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)))
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(section, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update section in a group
         * @param {string} groupId The id of the group
         * @param {string} sectionId The id of the section
         * @param {Section} [section] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSectionGroup: async (groupId: string, sectionId: string, section?: Section, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('putSectionGroup', 'groupId', groupId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('putSectionGroup', 'sectionId', sectionId)
            const localVarPath = `/groups/{groupId}/section/{sectionId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(section, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary put a user favorite course
         * @param {string} userId 
         * @param {string} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUserFavoriteCourse: async (userId: string, courseId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('putUserFavoriteCourse', 'userId', userId)
            // verify required parameter 'courseId' is not null or undefined
            assertParamExists('putUserFavoriteCourse', 'courseId', courseId)
            const localVarPath = `/users/{userId}/course/{courseId}/favorite`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Put User
         * @param {string} id The id of the user to work with
         * @param {string} [id2] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {string} [email] 
         * @param {File} [photo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUsersId: async (id: string, id2?: string, firstName?: string, lastName?: string, email?: string, photo?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putUsersId', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (id2 !== undefined) { 
                localVarFormParams.append('id', id2 as any);
            }
    
            if (firstName !== undefined) { 
                localVarFormParams.append('firstName', firstName as any);
            }
    
            if (lastName !== undefined) { 
                localVarFormParams.append('lastName', lastName as any);
            }
    
            if (email !== undefined) { 
                localVarFormParams.append('email', email as any);
            }
    
            if (photo !== undefined) { 
                localVarFormParams.append('photo', photo as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} userID 
         * @param {string} courseID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUsersUserIDCourseCourseID: async (userID: string, courseID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userID' is not null or undefined
            assertParamExists('putUsersUserIDCourseCourseID', 'userID', userID)
            // verify required parameter 'courseID' is not null or undefined
            assertParamExists('putUsersUserIDCourseCourseID', 'courseID', courseID)
            const localVarPath = `/users/{userID}/course/{courseID}`
                .replace(`{${"userID"}}`, encodeURIComponent(String(userID)))
                .replace(`{${"courseID"}}`, encodeURIComponent(String(courseID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} userid 
         * @param {string} courseid 
         * @param {string} groupid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUsersUseridCourseCourseidGroupGroupid: async (userid: string, courseid: string, groupid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userid' is not null or undefined
            assertParamExists('putUsersUseridCourseCourseidGroupGroupid', 'userid', userid)
            // verify required parameter 'courseid' is not null or undefined
            assertParamExists('putUsersUseridCourseCourseidGroupGroupid', 'courseid', courseid)
            // verify required parameter 'groupid' is not null or undefined
            assertParamExists('putUsersUseridCourseCourseidGroupGroupid', 'groupid', groupid)
            const localVarPath = `/users/{userid}/course/{courseid}/group/{groupid}`
                .replace(`{${"userid"}}`, encodeURIComponent(String(userid)))
                .replace(`{${"courseid"}}`, encodeURIComponent(String(courseid)))
                .replace(`{${"groupid"}}`, encodeURIComponent(String(groupid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary delete a course by only course creator
         * @param {string} id The id of the course to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCoursesCourseIDUsersUserID(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCoursesCourseIDUsersUserID(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary delete a group
         * @param {string} id The id of the group to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGroup(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGroup(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete section in a course
         * @param {string} courseId The id of the course
         * @param {string} sectionId The id of the section
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSectionCourse(courseId: string, sectionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSectionCourse(courseId, sectionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete section in a group
         * @param {string} groupId The id of the group
         * @param {string} sectionId The id of the section
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSectionGroup(groupId: string, sectionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSectionGroup(groupId, sectionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete User
         * @param {string} id The id of the user to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsersId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUsersId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {string} userID 
         * @param {string} courseID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsersUserIDCourseCourseID(userID: string, courseID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUsersUserIDCourseCourseID(userID, courseID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {string} userid 
         * @param {string} courseid 
         * @param {string} groupid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsersUseridCourseCourseidGroupGroupid(userid: string, courseid: string, groupid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUsersUseridCourseCourseidGroupGroupid(userid, courseid, groupid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get courses
         * @param {string} [name] The name to filter courses by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourses(name?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Course>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCourses(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an Course by Id
         * @param {string} id The id of the course to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCoursesId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Course>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCoursesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a Group by Id
         * @param {string} id The id of the group to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get user favorite course list
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserFavoriteCourses(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LearnerInCourse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserFavoriteCourses(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Users
         * @param {string} [name] The name to filter users by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(name?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a User by Id
         * @param {string} id The id of the user to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {string} userid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersUseridGroups(userid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LearnerInGroup>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersUseridGroups(userid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Perform login and return accesstoken
         * @param {PostAuthLoginRequest} [postAuthLoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAuthLogin(postAuthLoginRequest?: PostAuthLoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostAuthLogin200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAuthLogin(postAuthLoginRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Perform registration
         * @param {PostAuthRegisterRequest} [postAuthRegisterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAuthRegister(postAuthRegisterRequest?: PostAuthRegisterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAuthRegister(postAuthRegisterRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Post course
         * @param {Course} course The Course Object to create and the newly added Files
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCourses(course: Course, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Course>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCourses(course, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Post group
         * @param {Group} group 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGroups(group: Group, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postGroups(group, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create section in course
         * @param {string} id The id of the course
         * @param {Section} section The Section Object to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSectionCourse(id: string, section: Section, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Section>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSectionCourse(id, section, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add file to section
         * @param {string} sectionId The id of the section
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSectionFile(sectionId: string, file?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Section>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSectionFile(sectionId, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create section in group
         * @param {string} id The id of the group
         * @param {Section} section The Section Object to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSectionGroup(id: string, section: Section, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Section>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSectionGroup(id, section, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update password
         * @param {PutAuthResetpasswordRequest} [putAuthResetpasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putAuthResetpassword(putAuthResetpasswordRequest?: PutAuthResetpasswordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putAuthResetpassword(putAuthResetpasswordRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update a course by only course creator
         * @param {string} id The id of the course to work with
         * @param {Course} [course] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCourse(id: string, course?: Course, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putCourse(id, course, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update a group
         * @param {string} id The id of the group to work with
         * @param {Group} [group] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putGroup(id: string, group?: Group, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putGroup(id, group, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update section in a course
         * @param {string} courseId The id of the course
         * @param {string} sectionId The id of the section
         * @param {Section} [section] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putSectionCourse(courseId: string, sectionId: string, section?: Section, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Section>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putSectionCourse(courseId, sectionId, section, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update section in a group
         * @param {string} groupId The id of the group
         * @param {string} sectionId The id of the section
         * @param {Section} [section] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putSectionGroup(groupId: string, sectionId: string, section?: Section, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Section>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putSectionGroup(groupId, sectionId, section, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary put a user favorite course
         * @param {string} userId 
         * @param {string} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUserFavoriteCourse(userId: string, courseId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LearnerInCourse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putUserFavoriteCourse(userId, courseId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Put User
         * @param {string} id The id of the user to work with
         * @param {string} [id2] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {string} [email] 
         * @param {File} [photo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUsersId(id: string, id2?: string, firstName?: string, lastName?: string, email?: string, photo?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putUsersId(id, id2, firstName, lastName, email, photo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {string} userID 
         * @param {string} courseID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUsersUserIDCourseCourseID(userID: string, courseID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putUsersUserIDCourseCourseID(userID, courseID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {string} userid 
         * @param {string} courseid 
         * @param {string} groupid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUsersUseridCourseCourseidGroupGroupid(userid: string, courseid: string, groupid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LearnerInGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putUsersUseridCourseCourseidGroupGroupid(userid, courseid, groupid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary delete a course by only course creator
         * @param {string} id The id of the course to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCoursesCourseIDUsersUserID(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCoursesCourseIDUsersUserID(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete a group
         * @param {string} id The id of the group to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteGroup(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete section in a course
         * @param {string} courseId The id of the course
         * @param {string} sectionId The id of the section
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSectionCourse(courseId: string, sectionId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSectionCourse(courseId, sectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete section in a group
         * @param {string} groupId The id of the group
         * @param {string} sectionId The id of the section
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSectionGroup(groupId: string, sectionId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSectionGroup(groupId, sectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete User
         * @param {string} id The id of the user to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersId(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUsersId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {string} userID 
         * @param {string} courseID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersUserIDCourseCourseID(userID: string, courseID: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUsersUserIDCourseCourseID(userID, courseID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {string} userid 
         * @param {string} courseid 
         * @param {string} groupid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersUseridCourseCourseidGroupGroupid(userid: string, courseid: string, groupid: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUsersUseridCourseCourseidGroupGroupid(userid, courseid, groupid, options).then((request) => request(axios, basePath));
        },
        /**
         * Get courses
         * @param {string} [name] The name to filter courses by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourses(name?: string, options?: any): AxiosPromise<Array<Course>> {
            return localVarFp.getCourses(name, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Course by Id
         * @param {string} id The id of the course to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoursesId(id: string, options?: any): AxiosPromise<Course> {
            return localVarFp.getCoursesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a Group by Id
         * @param {string} id The id of the group to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupId(id: string, options?: any): AxiosPromise<Group> {
            return localVarFp.getGroupId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get user favorite course list
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserFavoriteCourses(userId: string, options?: any): AxiosPromise<Array<LearnerInCourse>> {
            return localVarFp.getUserFavoriteCourses(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Users
         * @param {string} [name] The name to filter users by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(name?: string, options?: any): AxiosPromise<Array<User>> {
            return localVarFp.getUsers(name, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a User by Id
         * @param {string} id The id of the user to work with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersId(id: string, options?: any): AxiosPromise<User> {
            return localVarFp.getUsersId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {string} userid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersUseridGroups(userid: string, options?: any): AxiosPromise<Array<LearnerInGroup>> {
            return localVarFp.getUsersUseridGroups(userid, options).then((request) => request(axios, basePath));
        },
        /**
         * Perform login and return accesstoken
         * @param {PostAuthLoginRequest} [postAuthLoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuthLogin(postAuthLoginRequest?: PostAuthLoginRequest, options?: any): AxiosPromise<PostAuthLogin200Response> {
            return localVarFp.postAuthLogin(postAuthLoginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Perform registration
         * @param {PostAuthRegisterRequest} [postAuthRegisterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuthRegister(postAuthRegisterRequest?: PostAuthRegisterRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postAuthRegister(postAuthRegisterRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Post course
         * @param {Course} course The Course Object to create and the newly added Files
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCourses(course: Course, options?: any): AxiosPromise<Course> {
            return localVarFp.postCourses(course, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Post group
         * @param {Group} group 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGroups(group: Group, options?: any): AxiosPromise<Group> {
            return localVarFp.postGroups(group, options).then((request) => request(axios, basePath));
        },
        /**
         * Create section in course
         * @param {string} id The id of the course
         * @param {Section} section The Section Object to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSectionCourse(id: string, section: Section, options?: any): AxiosPromise<Section> {
            return localVarFp.postSectionCourse(id, section, options).then((request) => request(axios, basePath));
        },
        /**
         * Add file to section
         * @param {string} sectionId The id of the section
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSectionFile(sectionId: string, file?: File, options?: any): AxiosPromise<Section> {
            return localVarFp.postSectionFile(sectionId, file, options).then((request) => request(axios, basePath));
        },
        /**
         * Create section in group
         * @param {string} id The id of the group
         * @param {Section} section The Section Object to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSectionGroup(id: string, section: Section, options?: any): AxiosPromise<Section> {
            return localVarFp.postSectionGroup(id, section, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update password
         * @param {PutAuthResetpasswordRequest} [putAuthResetpasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAuthResetpassword(putAuthResetpasswordRequest?: PutAuthResetpasswordRequest, options?: any): AxiosPromise<void> {
            return localVarFp.putAuthResetpassword(putAuthResetpasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update a course by only course creator
         * @param {string} id The id of the course to work with
         * @param {Course} [course] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCourse(id: string, course?: Course, options?: any): AxiosPromise<void> {
            return localVarFp.putCourse(id, course, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update a group
         * @param {string} id The id of the group to work with
         * @param {Group} [group] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putGroup(id: string, group?: Group, options?: any): AxiosPromise<void> {
            return localVarFp.putGroup(id, group, options).then((request) => request(axios, basePath));
        },
        /**
         * Update section in a course
         * @param {string} courseId The id of the course
         * @param {string} sectionId The id of the section
         * @param {Section} [section] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSectionCourse(courseId: string, sectionId: string, section?: Section, options?: any): AxiosPromise<Section> {
            return localVarFp.putSectionCourse(courseId, sectionId, section, options).then((request) => request(axios, basePath));
        },
        /**
         * Update section in a group
         * @param {string} groupId The id of the group
         * @param {string} sectionId The id of the section
         * @param {Section} [section] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSectionGroup(groupId: string, sectionId: string, section?: Section, options?: any): AxiosPromise<Section> {
            return localVarFp.putSectionGroup(groupId, sectionId, section, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary put a user favorite course
         * @param {string} userId 
         * @param {string} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUserFavoriteCourse(userId: string, courseId: string, options?: any): AxiosPromise<LearnerInCourse> {
            return localVarFp.putUserFavoriteCourse(userId, courseId, options).then((request) => request(axios, basePath));
        },
        /**
         * Put User
         * @param {string} id The id of the user to work with
         * @param {string} [id2] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {string} [email] 
         * @param {File} [photo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUsersId(id: string, id2?: string, firstName?: string, lastName?: string, email?: string, photo?: File, options?: any): AxiosPromise<User> {
            return localVarFp.putUsersId(id, id2, firstName, lastName, email, photo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {string} userID 
         * @param {string} courseID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUsersUserIDCourseCourseID(userID: string, courseID: string, options?: any): AxiosPromise<void> {
            return localVarFp.putUsersUserIDCourseCourseID(userID, courseID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {string} userid 
         * @param {string} courseid 
         * @param {string} groupid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUsersUseridCourseCourseidGroupGroupid(userid: string, courseid: string, groupid: string, options?: any): AxiosPromise<LearnerInGroup> {
            return localVarFp.putUsersUseridCourseCourseidGroupGroupid(userid, courseid, groupid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary delete a course by only course creator
     * @param {string} id The id of the course to work with
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteCoursesCourseIDUsersUserID(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteCoursesCourseIDUsersUserID(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete a group
     * @param {string} id The id of the group to work with
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteGroup(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteGroup(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete section in a course
     * @param {string} courseId The id of the course
     * @param {string} sectionId The id of the section
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteSectionCourse(courseId: string, sectionId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteSectionCourse(courseId, sectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete section in a group
     * @param {string} groupId The id of the group
     * @param {string} sectionId The id of the section
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteSectionGroup(groupId: string, sectionId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteSectionGroup(groupId, sectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete User
     * @param {string} id The id of the user to work with
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteUsersId(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteUsersId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {string} userID 
     * @param {string} courseID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteUsersUserIDCourseCourseID(userID: string, courseID: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteUsersUserIDCourseCourseID(userID, courseID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {string} userid 
     * @param {string} courseid 
     * @param {string} groupid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteUsersUseridCourseCourseidGroupGroupid(userid: string, courseid: string, groupid: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteUsersUseridCourseCourseidGroupGroupid(userid, courseid, groupid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get courses
     * @param {string} [name] The name to filter courses by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCourses(name?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCourses(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an Course by Id
     * @param {string} id The id of the course to work with
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCoursesId(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCoursesId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a Group by Id
     * @param {string} id The id of the group to work with
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getGroupId(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getGroupId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get user favorite course list
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserFavoriteCourses(userId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUserFavoriteCourses(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Users
     * @param {string} [name] The name to filter users by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUsers(name?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUsers(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a User by Id
     * @param {string} id The id of the user to work with
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUsersId(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUsersId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your GET endpoint
     * @param {string} userid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUsersUseridGroups(userid: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUsersUseridGroups(userid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Perform login and return accesstoken
     * @param {PostAuthLoginRequest} [postAuthLoginRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postAuthLogin(postAuthLoginRequest?: PostAuthLoginRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postAuthLogin(postAuthLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Perform registration
     * @param {PostAuthRegisterRequest} [postAuthRegisterRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postAuthRegister(postAuthRegisterRequest?: PostAuthRegisterRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postAuthRegister(postAuthRegisterRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Post course
     * @param {Course} course The Course Object to create and the newly added Files
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postCourses(course: Course, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postCourses(course, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Post group
     * @param {Group} group 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postGroups(group: Group, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postGroups(group, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create section in course
     * @param {string} id The id of the course
     * @param {Section} section The Section Object to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postSectionCourse(id: string, section: Section, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postSectionCourse(id, section, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add file to section
     * @param {string} sectionId The id of the section
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postSectionFile(sectionId: string, file?: File, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postSectionFile(sectionId, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create section in group
     * @param {string} id The id of the group
     * @param {Section} section The Section Object to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postSectionGroup(id: string, section: Section, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postSectionGroup(id, section, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update password
     * @param {PutAuthResetpasswordRequest} [putAuthResetpasswordRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putAuthResetpassword(putAuthResetpasswordRequest?: PutAuthResetpasswordRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putAuthResetpassword(putAuthResetpasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update a course by only course creator
     * @param {string} id The id of the course to work with
     * @param {Course} [course] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putCourse(id: string, course?: Course, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putCourse(id, course, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update a group
     * @param {string} id The id of the group to work with
     * @param {Group} [group] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putGroup(id: string, group?: Group, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putGroup(id, group, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update section in a course
     * @param {string} courseId The id of the course
     * @param {string} sectionId The id of the section
     * @param {Section} [section] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putSectionCourse(courseId: string, sectionId: string, section?: Section, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putSectionCourse(courseId, sectionId, section, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update section in a group
     * @param {string} groupId The id of the group
     * @param {string} sectionId The id of the section
     * @param {Section} [section] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putSectionGroup(groupId: string, sectionId: string, section?: Section, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putSectionGroup(groupId, sectionId, section, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary put a user favorite course
     * @param {string} userId 
     * @param {string} courseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putUserFavoriteCourse(userId: string, courseId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putUserFavoriteCourse(userId, courseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Put User
     * @param {string} id The id of the user to work with
     * @param {string} [id2] 
     * @param {string} [firstName] 
     * @param {string} [lastName] 
     * @param {string} [email] 
     * @param {File} [photo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putUsersId(id: string, id2?: string, firstName?: string, lastName?: string, email?: string, photo?: File, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putUsersId(id, id2, firstName, lastName, email, photo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {string} userID 
     * @param {string} courseID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putUsersUserIDCourseCourseID(userID: string, courseID: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putUsersUserIDCourseCourseID(userID, courseID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {string} userid 
     * @param {string} courseid 
     * @param {string} groupid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putUsersUseridCourseCourseidGroupGroupid(userid: string, courseid: string, groupid: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putUsersUseridCourseCourseidGroupGroupid(userid, courseid, groupid, options).then((request) => request(this.axios, this.basePath));
    }
}


